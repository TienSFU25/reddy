2^n

vs 

n^2

arr = [1,2,3,4,5,6,7,8,9,10]

const twoPowerN = arr.map(v => Math.pow(2, v));
const nPowerTwo = arr.map(v => Math.pow(v, 2));

nFact = [1];
for (let i = 1; i < arr.length; i++) {
    nFact[i] = i * nFact[i-1];
}

let total = 0;
// this function is O(2^n)
exponentialFunc = (current, end) => {
    total += 1;
    if (current >= end) return;

    exponentialFunc(current + 1, end);
    exponentialFunc(current + 2, end);
}


// listing permutations of a string is O(n!)
'ab'
1

'ab'
'ba'
1*2


'abc'
'acb'
'bca'
'bac'
'cab'
'cba'

1*2*3

'abcd'
1*2*3*4

'abcde'
1*2*3*4*5

// e.g [1, 3, 6, 4, 1, 2]
// should return 5
let missingInteger = (arr) => {
    let seen = {};
    let max = 0;

    for (let i = 0; i < arr.length; i++) {
        seen[arr[i]] = true;

        if (arr[i] > max)
            max = arr[i];
    }

    for (let i = 1; i < max; i++) {
        if (!seen[i]) {
            return i;
        }
    }

    return max + 1;
};